java.lang.AssertionError: Password 'abcd1234' for root user of MySQL doesn't work.
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at jtm.activity13.DatabaseTest.setUpBeforeClass(DatabaseTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)










package jtm.activity13;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

public class TeacherManager {

	protected Connection conn;


	public TeacherManager() {
		// TODO #1 When new TeacherManager is created, create connection to the
		// database server:
		// url = "jdbc:mysql://localhost/?autoReconnect=true&useSSL=false"
		// user = "root"
		// pass = "abcd1234"
		// Hints:
		// 1. Do not pass database name into url, because some statements
		// for tests need to be executed server-wise, not just database-wise.
		// 2. Set AutoCommit to false and use conn.commit() where necessary in
		// other methods
				
		try {                    
            //conn = DriverManager.getConnection("jdbc:sqlite:W:/Inga/e/activity13.db");   
            conn = DriverManager.getConnection("jdbc:mysql://localhost/?autoReconnect=true&useSSL=false", "root", "abcd1234");
            conn.setAutoCommit(false);
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        } 
	}

	/**
	 * Returns a Teacher instance represented by the specified ID.
	 * 
	 * @param id
	 *            the ID of teacher
	 * @return a Teacher object
	 */
	public Teacher findTeacher(int id) {
		// TODO #2 Write an sql statement that searches teacher by ID.
		// If teacher is not found return Teacher object with zero or null in
		// its fields!
		// Hint: Because default database is not set in connection,
		// use full notation for table "database_activity.Teacher"
		try {
			Statement st = conn.createStatement();
			ResultSet rs = st.executeQuery("select * from database_activity.Teacher where id=" + id);			
			if(rs.next()) {				
				return new Teacher(rs.getInt("id"), rs.getString("firstName"), rs.getString("lastName"));
			}
			else {
				return new Teacher(0, null, null);
			}
			
		}catch (SQLException e) {
			System.err.println(e.getMessage());
		}
		return null;
	}

	/**
	 * Returns a list of Teacher object that contain the specified first name
	 * and last name. This will return an empty List of no match is found.
	 * 
	 * @param firstName
	 *            the first name of teacher.
	 * @param lastName
	 *            the last name of teacher.
	 * @return a list of Teacher object.
	 */
	public List<Teacher> findTeacher(String firstName, String lastName) {
		// TODO #3 Write an sql statement that searches teacher by first and
		// last name and returns results as ArrayList<Teacher>.
		// Note that search results of partial match
		// in form ...like '%value%'... should be returned
		// Note, that if nothing is found return empty list!
		ArrayList<Teacher> list= new ArrayList<Teacher>();
		try {
			PreparedStatement ps = conn.prepareStatement("select * from database_activity.Teacher where firstName like ? and lastName ?");			
			ps.setString(1, "%" + firstName + "%");
			ps.setString(2, "%" + lastName + "%");			
			ResultSet rs = ps.executeQuery();			
			while(rs.next()) {				
				list.add(new Teacher(rs.getInt("id"), rs.getString("firstName"), rs.getString("lastName")));
			}			
		}catch (SQLException e) {
			System.err.println(e.getMessage());
		}
		return list;
	}

	/**
	 * Insert an new teacher (first name and last name) into the repository.
	 * 
	 * @param firstName
	 *            the first name of teacher
	 * @param lastName
	 *            the last name of teacher
	 * @return true if success, else false.
	 */

	public boolean insertTeacher(String firstName, String lastName) {
		// TODO #4 Write an sql statement that inserts teacher in database.
		try {
			Statement st = conn.createStatement();
			int res = st.executeUpdate("insert into database_activity.Teacher values ('" + firstName + "','" + lastName+ "')");
			conn.commit();
			return res==1;
		}catch (SQLException e) {
			System.err.println(e.getMessage());
		}
		return false;
	}

	/**
	 * Insert teacher object into database
	 * 
	 * @param teacher
	 * @return true on success, false on error (e.g. non-unique id)
	 */
	public boolean insertTeacher(Teacher teacher) {
		// TODO #5 Write an sql statement that inserts teacher in database.
		return insertTeacher(teacher.getFirstName(), teacher.getLastName());
	}

	/**
	 * Updates an existing Teacher in the repository with the values represented
	 * by the Teacher object.
	 * 
	 * @param teacher
	 *            a Teacher object, which contain information for updating.
	 * @return true if row was updated.
	 */
	public boolean updateTeacher(Teacher teacher) {
		boolean status = false;
		// TODO #6 Write an sql statement that updates teacher information.
		try {
			Statement st = conn.createStatement();
			int res = st.executeUpdate("update database_activity.Teacher set firstName='" + teacher.getFirstName()+ 
					"', lastName='" + teacher.getLastName()+ "' where id=" + teacher.getID());
			status= res==1;
			conn.commit();
		}catch (SQLException e) {
			System.err.println(e.getMessage());
		}
		
		return status;
	}

	/**
	 * Delete an existing Teacher in the repository with the values represented
	 * by the ID.
	 * 
	 * @param id
	 *            the ID of teacher.
	 * @return true if row was deleted.
	 */
	public boolean deleteTeacher(int id) {
		// TODO #7 Write an sql statement that deletes teacher from database.
		try {
			Statement st = conn.createStatement();
			int res = st.executeUpdate("delete from database_activity.Teacher where id=" + id);
			conn.commit();
			return res==1;
		} catch (SQLException e) {
			System.err.println(e.getMessage());
		}
		return false;
	}

	public void closeConnecion() {
		// TODO Close connection if and reset it to release connection to the
		// database server
		try {
			conn.close();
		}catch (SQLException e) {
			System.err.println(e.getMessage());
		}
	}
}

