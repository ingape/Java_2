org.junit.runners.model.TestTimedOutException: test timed out after 5 seconds
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:717)
	at jtm.activity11.ArrayFillerManager.fillParalelly(ArrayFillerManager.java:87)
	at jtm.activity11.ArrayFillerManagerTest.test5FillingTimes(ArrayFillerManagerTest.java:156)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)





package Activity_11;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;


/**
 * This is frontend class for array filler. It uses ArrayFiller to fill array of
 * integers using sequental or concurrent (parallel) approach
 */
public class ArrayFillerManager {
	static int[] array; // array to be filled
	static int latency; // emulated latency in ms
	static int minValue, maxValue; // min and max (including) of the
									// array cell
	private static LinkedList<Thread> threads; // list of threads when parallel
	// filling is used

	// HINT feel free to use main() method to call setUp(), fillStupidly() etc.
	// for debugging purposes if unit tests doesn't show enough information,
	// what exactly in implementation seems wrong.
	// Note that main() method will not be used in unit tests.

	public static int[] setUp(int arraySize, int latency, int minValue, int maxValue) {
		// TODO save passed values in prepared structure
		// initialize array with passed size
		// initialize list of threads
		// return reference to the initialized array
		ArrayFillerManager.latency = latency;
		ArrayFillerManager.minValue = minValue;
		ArrayFillerManager.maxValue = maxValue;
		array = new int[arraySize];
		threads = new LinkedList<Thread>();
		return array;
	}

	public static void fillStupidly() {
		// TODO create cycle which creates new ArrayFiller objects
		// with filling range of only ONE cell at a time (i.e. range from..to is
		// 0..0, then 1..1, etc.) and invoke .run() method for these objects.
		// Note, that invocation of .run() method directly executes it in
		// current (main) thread.
		// Note that this method emulates, what would happen if you would send
		// just small portions of data through media with latency.
		for (int i = 0; i < array.length; i++) {
			ArrayFiller a = new ArrayFiller(latency, minValue, maxValue, i, i);
			Thread thread = new Thread(a);
			thread.start();
			try {
				thread.join();
			} catch (InterruptedException ie) {

			}
		}
	}

	public static void fillSequentially() {
		// TODO create cycle which creates one ArrayFiller object
		// with filling range for ALL array but executed just in SINGLE thread
		// by invocation of .run() method directly.
		// Note that this method emulates, what would happen if you would do
		// proper "buffering" with large amount of data, but do execution just
		// in single thread.
		ArrayFiller a = new ArrayFiller(latency, minValue, maxValue, 0, array.length - 1);
		a.run();
		
	}

	public static void fillParalelly() {
		// TODO create cycle which creates new ArrayFiller objects
		// with any range and pass them as references to the Thread constructor.
		// Add newly created Thread objects into threads list and start them
		// threads using .start() method. Note that invocation of .start() for
		// thread object creates new concurrent thread in application
		// Note that, to pass tests, this implementation should run faster than
		// fillSequentally() method.
		//
		// HINT: Don't forget to check that separately started threads are
		// actually finished by calling .join() method for them.
		// Note that this method emulates, what would happen if you do proper
		// buffering and scaling of the execution.

		for (int i = 0; i < array.length; i++) {
			ArrayFiller a = new ArrayFiller(latency, minValue, maxValue, i, i);
			Thread thread = new Thread(a);
			threads.add(thread);
			thread.start();
		}

		for (Thread t : threads) {
			try {
				t.join();
			} catch (InterruptedException e) {}
		}

	}
		/*
	public static void main(String[] args) {
		setUp(20, 0, -10, 10);
		fillStupidly();
		for(int a1:array) {
		System.out.println(a1);
		}
	}
	//*/

}
